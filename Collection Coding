


Problem Statement:

A cinema hall has multiple rows of seats, each row having a fixed number of seats. Customers can book or cancel seats in real time. The management wants a system that can handle seat booking efficiently and tell which seats are booked in each row.

You need to implement a SeatBookingSystem using Java Collections that supports the following operations:

Operations Supported:

1. `book(rowNumber, seatNumber)` â€” Books a seat. If already booked, return `"Already Booked"`.
2. `cancel(rowNumber, seatNumber)` â€” Cancels the booking. If not booked, return `"Not Booked"`.
3. `view(rowNumber)` â€” Returns a list of all booked seats (in sorted order) in that row.
4. `allBookings()` â€” Returns all booked seats across all rows as a map with rowNumber as key and list of booked seats as value.



Input Format:

* First line: Two integers `R` and `S`, representing the number of rows and seats per row.
* Next `N` lines: Each line contains one of the four commands:

  * `BOOK r s`
  * `CANCEL r s`
  * `VIEW r`
  * `ALL`

---

Output Format:

* For `BOOK` and `CANCEL`: Output appropriate message.
* For `VIEW` and `ALL`: Output current bookings as described.

---

Constraints:

* 1 â‰¤ R â‰¤ 100
* 1 â‰¤ S â‰¤ 50
* 1 â‰¤ r â‰¤ R
* 1 â‰¤ s â‰¤ S
* Maximum commands: 10,000
* Use efficient collections (e.g., `HashMap`, `TreeSet`, etc.)

---

Sample Input:

```
3 5
BOOK 1 3
BOOK 1 3
BOOK 2 1
CANCEL 1 2
CANCEL 2 1
VIEW 1
BOOK 1 2
VIEW 1
ALL
```



Sample Output:

```
Booked Successfully
Already Booked
Booked Successfully
Not Booked
Cancelled Successfully
[3]
Booked Successfully
[2, 3]
{1=[2, 3]}
```



 ðŸ’¡ Hints:

* Use a `Map<Integer, Set<Integer>>` to represent rows and their booked seats.
* Use `TreeSet` to keep seats sorted.
* Use `HashMap` for efficient row access.

